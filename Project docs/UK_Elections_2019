{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPRtjGvUb1TZmG7l/bxbjc5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Connect to Google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uV-QkQxKDnWw","executionInfo":{"status":"ok","timestamp":1721393684300,"user_tz":-60,"elapsed":23808,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}},"outputId":"0cff4467-08e1-4cd7-9824-7ebe284358d0"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"FDqNpqSYqSBv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721393687758,"user_tz":-60,"elapsed":530,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}},"outputId":"74852530-3568-42b7-abde-5b9d242f38ef"},"outputs":[{"output_type":"stream","name":"stdout","text":["Python 3.10.12\n"]}],"source":["# Python version\n","!python --version"]},{"cell_type":"code","source":["# Install libraries\n","!pip install pandas\n","!pip install matplotlib"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_erPoDnjDJVN","executionInfo":{"status":"ok","timestamp":1721395993925,"user_tz":-60,"elapsed":15683,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}},"outputId":"b18c237a-1d15-4bd7-beb9-b0f15140f0cf"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}]},{"cell_type":"code","source":["# Import libraries\n","import pandas as pd\n","from typing import List\n","from matplotlib import pyplot as plt"],"metadata":{"id":"Kl7qbKCKDO-F","executionInfo":{"status":"ok","timestamp":1721396429691,"user_tz":-60,"elapsed":466,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Pre-Processing Election data\n","def uk_elections_data(file_path:str = None):\n","  r\"\"\"Pre-Process UK elections data\n","\n","  Args:\\n\n","    file_path: Path to the election file\n","  \"\"\"\n","  df = pd.read_csv(file_path)\n","\n","  # Dropping a column with NaNs\n","  df = df.drop('invalid', axis = 1)\n","\n","  # Get the data for the major parties\n","  major_parties = ['Con', 'Lab']\n","  df = df[df['elected_mp_party'].isin(major_parties)]\n","  print(f\"Columns of the file: {df.columns}\")\n","  print(f\"Length of the file: {len(df)}\")\n","  return df\n","\n","# 2019 Elections data\n","file_path = '/content/drive/MyDrive/MadhuTraining/ge_2019_constituencies.csv'\n","previous_elections_df = uk_elections_data(file_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1LiJdJPoD3CL","executionInfo":{"status":"ok","timestamp":1721396798242,"user_tz":-60,"elapsed":562,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}},"outputId":"d0df5024-0932-4d37-a81b-29a537eff8e0"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Columns of the file: Index(['const_id', 'const_name', 'elected_mp_party', 'elected_mp_party_name',\n","       'elected_mp_name', 'elected_mp_votes', 'majority', 'valid',\n","       'electorate', 'turnout_pct', 'ge17_party', 'ge17_majority',\n","       'ge17_turnout'],\n","      dtype='object')\n","Length of the file: 567\n"]}]},{"cell_type":"code","source":["# Calculating the total vote\n","def uk_election_total_vote(df:pd.DataFrame = None):\n","  r\"\"\"Total vote count\n","\n","  Args:\\n\n","    df: Election dataframe\n","  \"\"\"\n","  cols = ['elected_mp_party', 'elected_mp_votes']\n","  df = df[cols]\n","  df = df.groupby('elected_mp_party')['elected_mp_votes'].sum()\n","  df = df.to_frame()\n","  print(f\"2019 UK elections vote share: {}\")\n","  return df\n","\n","uk_elections_total_vote_df = uk_election_total_vote(previous_elections_df)\n"],"metadata":{"id":"oQ_wadGtLbgY","executionInfo":{"status":"ok","timestamp":1721396803125,"user_tz":-60,"elapsed":492,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# Plot the data\n","def plot_total_count(df:pd.DataFrame = None):\n","  r\"\"\"Plotting total vote count\n","\n","  Args:\\n\n","    df: Election dataframe\n","  \"\"\"\n","  df.plot(kind = 'bar')\n","\n","plot_total_count(uk_elections_total_vote_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"UXgguTdrMetJ","executionInfo":{"status":"ok","timestamp":1721396806045,"user_tz":-60,"elapsed":4,"user":{"displayName":"Vardhan Raj Modi","userId":"17856872855098015060"}},"outputId":"b9c8d24d-5f1f-48d2-8cab-18125b272e1c"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}